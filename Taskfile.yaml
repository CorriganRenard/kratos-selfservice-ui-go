# https://taskfile.dev

version: "3"

tasks:
  default:
    deps: [build]


  docker-build:
    cmds:
      - docker build --no-cache -t cwrenard/kratos-selfservice-ui-go:v0.028 .


  docker-push:
    cmds:
      - docker image push cwrenard/kratos-selfservice-ui-go:latest

  clean:
    cmds:
      - rm -Rvf static   # rm -rf static
      - mkdir -p static/images static/css
    

 
  ensure_tailwind:
    cmds:
      - if ! which tailwindcss > /dev/null; then echo You must install tailwindcss standalone executable 'https://tailwindcss.com/blog/standalone-cli'; exit 1; fi

  gen_css:
    cmds:
      - task: ensure_tailwind # do not run in parallel
      - tailwindcss -i ./static_src/css/tailwind-input.css -o ./static/css/tailwind.css
     
  autocss:
    env: 
      LOCAL_TARS: "yes"
    cmds:
      - while true; do task runloopcss; done

  runloopcss:
    deps: [gen_css]
    cmds:
      - echo "running gen_css" --watch=ui     

  kill_port:
    desc: Check for and kill processes using port 4477
    cmds:
      - |
        PID=$(lsof -ti:4477 || true)
        if [ -n "$PID" ]; then
          echo "Killing process using port 4477 (PID: $PID)"
          kill -9 $PID
        else
          echo "No process using port 4477"
        fi

  build:
    desc: Build the application
    deps: [gen_css]
    cmds:
      - go build -o kratos-selfservice-ui-go

  run:
    desc: Run the application
    deps: [build, kill_port]
    cmds:
      - ./kratos-selfservice-ui-go -port 4477 -base-url http://localhost:4477/ -kratos-public-url http://localhost:4433/ -kratos-admin-url http://localhost:4434/ -kratos-browser-url http://localhost:4455/

  dev:
    desc: Run the application with auto-reload of CSS
    cmds:
      - task: gen_css
      - task: build
      - task: kill_port
      - task: run
 
  release:
    desc: Increment version, build Docker image and push to registry
    cmds:
      - task: clean
      - task: gen_css
      - task: build
      - |
        # Extract current version from Taskfile
        CURRENT_VERSION=$(grep -o 'cwrenard/kratos-selfservice-ui-go:v[0-9]\.[0-9][0-9][0-9]' Taskfile.yaml | head -1)
        echo "Current version string: $CURRENT_VERSION"
        
        # Extract just the numeric part (0.001)
        VERSION_NUM=$(echo "$CURRENT_VERSION" | grep -o '[0-9]\.[0-9][0-9][0-9]')
        echo "Current version number: $VERSION_NUM"
        
        # Split into major and minor parts
        MAJOR=$(echo "$VERSION_NUM" | cut -d'.' -f1)
        MINOR=$(echo "$VERSION_NUM" | cut -d'.' -f2)
        echo "Major: $MAJOR, Minor: $MINOR"
        
        # Convert minor to integer, forcing base 10 to handle leading zeros
        # The "10#" prefix is necessary to treat numbers with leading zeros as decimal
        MINOR_NUM=$(echo "$MINOR" | sed 's/^0*//')  # Remove leading zeros
        if [ -z "$MINOR_NUM" ]; then
          MINOR_NUM=0  # If it was all zeros, set to 0
        fi
        echo "Minor as number: $MINOR_NUM"
        
        # Increment minor version
        NEW_MINOR_NUM=$((MINOR_NUM + 1))
        echo "New minor number: $NEW_MINOR_NUM"
        
        # Format back to 3 digits with leading zeros
        NEW_MINOR=$(printf "%03d" $NEW_MINOR_NUM)
        NEW_VERSION="$MAJOR.$NEW_MINOR"
        echo "New version: $NEW_VERSION"
        
        # Update version in Taskfile
        sed -i.bak "s/cwrenard\/kratos-selfservice-ui-go:v[0-9]\.[0-9][0-9][0-9]/cwrenard\/kratos-selfservice-ui-go:v$NEW_VERSION/g" Taskfile.yaml
        rm Taskfile.yaml.bak
        
        # Build Docker image with new version
        docker build --no-cache -t cwrenard/kratos-selfservice-ui-go:v$NEW_VERSION -t cwrenard/kratos-selfservice-ui-go:latest .
        
        # Push Docker image to registry
        docker push cwrenard/kratos-selfservice-ui-go:v$NEW_VERSION
        docker push cwrenard/kratos-selfservice-ui-go:latest
        
        echo "Release v$NEW_VERSION completed successfully"
 